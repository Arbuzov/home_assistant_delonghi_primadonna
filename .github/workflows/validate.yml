name: Validate

on:
  push:
  pull_request:

jobs:
  hacs:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"

      - uses: "hacs/action@main"
        name: HACS validation
        with:
          category: "integration"

      - uses: "home-assistant/actions/hassfest@master"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements_dev.txt

      - name: Flake8 lint
        uses: TrueBrain/actions-flake8@v2
        with:
          path: custom_components

      - name: Verify import sorting
        run: isort --diff --check-only custom_components

  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements_dev.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=custom_components/delonghi_primadonna \
                 --cov-report=xml \
                 --cov-report=html \
                 --cov-report=term-missing \
                 --junitxml=pytest.xml
          coverage report > coverage.txt

      - name: Prepare PR comment
        if: github.event_name == 'pull_request'
        run: |
          python <<'PY'
          import xml.etree.ElementTree as ET

          tests = ET.parse('pytest.xml').getroot().attrib
          total = int(tests.get('tests', 0))
          failures = int(tests.get('failures', 0))
          errors = int(tests.get('errors', 0))
          skipped = int(tests.get('skipped', 0))
          passed = total - failures - errors - skipped
          summary = f"**Tests:** {passed} passed, {failures + errors} failed, {skipped} skipped, {total} total"

          coverage_report = open('coverage.txt').read()

          import textwrap

          comment = textwrap.dedent(f"""
          ### Test Results
          {summary}

          ### Coverage
          ```
          {coverage_report}
          ```
          """)
          with open('pr_comment.md', 'w') as f:
              f.write(comment)
          PY

      - name: Comment test results
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: pr_comment.md
          identifier: test-and-coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov
            coverage.xml
